/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java CauldronServer project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java CauldronServer
    id 'java-library'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'checkstyle'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "com.github.spotbugs" version "3.0.0"
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom "io.projectreactor:reactor-bom:Californium-RELEASE"
    }
}


apply from:'./gradle/publishing.gradle'


dependencies {
    // https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs
    compile group: 'com.github.spotbugs', name: 'spotbugs', version: '3.1.12'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    implementation 'io.projectreactor.netty:reactor-netty'

    // HTTP Server with Http2 support (not exported to consumers)
    implementation 'org.glassfish.grizzly:grizzly-framework:2.4.0'
    implementation 'org.glassfish.grizzly:grizzly-http-server:2.4.0'
    // REMOVE LATER
    compile 'org.glassfish.grizzly.samples:grizzly-http-server-samples:2.4.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.29'
    compile 'org.dom4j:dom4j:2.1.1'

    implementation 'com.konghq:unirest-java:3.3.00'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.7'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    implementation 'com.decoded:JavaUtils:1.0'
    implementation 'org.glassfish.grizzly:grizzly-http:2.4.0'
    implementation 'org.glassfish.grizzly:grizzly-websockets-server:2.4.0'
    implementation 'org.glassfish.grizzly:grizzly-websockets:2.4.0'
    implementation 'org.glassfish.grizzly:grizzly-http-client:1.15'

    implementation  'io.netty:netty-all:4.1.43.Final'

    implementation 'com.google.inject:guice:4.2.2'
    implementation 'org.reflections:reflections:0.9.11'

    implementation 'com.google.crypto.tink:tink:1.2.2'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugsTest.onlyIf { false }

checkstyle {
    ignoreFailures = false
    configDir = file("$rootProject.projectDir/config/checkstyle")
    toolVersion = '8.28'
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}
